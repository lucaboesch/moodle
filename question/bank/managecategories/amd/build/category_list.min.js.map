{"version":3,"file":"category_list.min.js","sources":["../src/category_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module handling ordering of categories.\n *\n * @module     qbank_managecategories\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Fragment from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport Modal from 'core/modal';\nimport {get_string as getString} from 'core/str';\n\nconst SELECTORS = {\n    CATEGORY_LIST: '.category_list',\n    MODAL_CATEGORY_ITEM: '.modal_category_item[data-categoryid]',\n    CATEGORY_RENDERED: '#categoriesrendered',\n    ACTIONABLE_ELEMENT: 'a, [role=\"button\"], [role=\"menuitem\"]',\n    SHOW_DESCRIPTION_CHECKBOX: '[name=\"qbshowdescr\"]',\n    MOVE_CATEGORY_MENU_ITEM: '[role=\"menuitem\"][data-actiontype=\"move\"]',\n    LIST_ITEM: '.list_item[data-categoryid]',\n    DRAG_HANDLE: '[data-drag-type=\"move\"]',\n    DROP_TARGET: '.droptarget',\n    CONTEXT: '.category_list[data-contextid]',\n};\n\n/**\n * Sets up sortable list in the column sort order page.\n * @param {number} pagecontextid Context id for fragment.\n */\nconst setupSortableLists = (pagecontextid) => {\n    const draggableitems = document.querySelectorAll(SELECTORS.LIST_ITEM);\n    const droppableitems = document.querySelectorAll(SELECTORS.LIST_ITEM);\n    const dragHandles = document.querySelectorAll(SELECTORS.DRAG_HANDLE);\n\n    // Touch events do not have datatranfer property.\n    // This variable is used to store id of first element that started the touch events.\n    let categoryid;\n\n    /**\n     * Get touch target at touch point.\n     * The target of all touch events is the first element that has been touched at 'touch start'.\n     * So we need to infer the target from touch point for 'touch move' and 'touch end' events.\n     *\n     * @param {Object} e event\n     * @returns {any | Element}\n     */\n    const getTouchTarget = (e) => {\n        const target = document.elementFromPoint(\n            e.changedTouches[0].pageX,\n            e.changedTouches[0].pageY\n        );\n        // Check if the target is droppable.\n        return target.closest(SELECTORS.LIST_ITEM);\n    };\n\n    const getInsertBefore = (clientY, dropTarget) => {\n\n        // Get the current mouse position within the drop target\n        const mouseY = clientY - dropTarget.getBoundingClientRect().top;\n\n        // Get the height of the drop target\n        const targetHeight = dropTarget.clientHeight;\n\n        // Check if the mouse is over the top half of the drop target\n        return mouseY < targetHeight / 2;\n    };\n\n    const clearTargetIndicators = () => {\n        const dropTarget = document.querySelector('.qbank_managecategories-category-droptarget');\n        if (dropTarget) {\n            dropTarget.classList.remove('qbank_managecategories-category-droptarget');\n        }\n        const dropTargetBefore = document.querySelector('.qbank_managecategories-category-droptarget-before');\n        if (dropTargetBefore) {\n            dropTargetBefore.classList.remove('qbank_managecategories-category-droptarget-before');\n        }\n    };\n\n    /**\n     * Handle Drag start\n     * @param {Object} e event\n     */\n    const handleDragStart = (e) => {\n        window.console.info('dragStart');\n        const target = e.target.closest(SELECTORS.LIST_ITEM);\n        // Return if target is not a draggable item.\n        if (!target) {\n            return;\n        }\n        // Save category ID of current moving item.\n        // The datatransfer is not used as it is not a property of touch events.\n        categoryid = target.dataset?.categoryid;\n\n        // Prevent scrolling when touching on the draggable item.\n        if (e.type === 'touchstart' && e.cancelable) {\n            e.preventDefault();\n        }\n    };\n\n    /**\n     * Handle Drag move\n     * Provide drag effect for touch events.\n     *\n     * @param {Object} e event\n     */\n    const handleDrag = (e) => {\n        window.console.info('drag');\n        let target;\n        if (e.type === 'touchmove') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest(SELECTORS.LIST_ITEM);\n        }\n\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Return if target is a child of the dragged category.\n        if (target.closest(`[data-categoryid=\"${categoryid}\"]`)) {\n            return;\n        }\n\n        const insertBefore = getInsertBefore(e.clientY, target);\n\n        // Remove all target indicators.\n        clearTargetIndicators();\n\n        if (insertBefore && target === target.parentElement.firstElementChild) {\n            // Show the indicator at the top of the list.\n            target.classList.add('qbank_managecategories-category-droptarget-before');\n            return;\n        }\n\n        if (!insertBefore && target === target.parentElement.lastElementChild) {\n            // Show the indicator at the bottom of the list.\n            target.classList.add('qbank_managecategories-category-droptarget');\n            return;\n        }\n\n        const insertTarget = insertBefore ? target : target.nextElementSibling;\n\n        // Show the indicator at the bottom of the previous element.\n        if (insertTarget.previousElementSibling) {\n            insertTarget.previousElementSibling.classList.add('qbank_managecategories-category-droptarget');\n        }\n\n    };\n\n    /**\n     * Handle Drag end\n     * @param {Object} e event\n     */\n    const handleDragEnd = (e) => {\n        let target;\n        const pending = new Pending('qbank_managecategories/dragend');\n        clearTargetIndicators();\n        if (e.type === 'touchend') {\n            target = getTouchTarget(e);\n        } else {\n            target = e.target.closest(SELECTORS.LIST_ITEM);\n        }\n\n        // Return if target is not a droppable item or there is no sourceid.\n        if (!target || !categoryid) {\n            return;\n        }\n\n        // Get list item whose id is the same as current moving category id.\n        const source = document.getElementById(`category-${categoryid}`);\n        if (!source) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // Reset sourceid for touch event.\n        categoryid = null;\n\n        let targetCategory;\n        const insertBefore = getInsertBefore(e.clientY, target);\n        let before = insertBefore;\n        if (insertBefore && target === target.parentElement.firstElementChild) {\n            targetCategory = target.dataset.categoryid;\n            // Insert the category at the top of the list.\n            target.closest(SELECTORS.CATEGORY_LIST).insertBefore(source, target);\n        } else if (!insertBefore && target === target.parentElement.lastElementChild) {\n            targetCategory = target.dataset.categoryid;\n            // Insert the category at the end of the list.\n            target.closest(SELECTORS.CATEGORY_LIST).appendChild(source);\n        } else {\n            const insertTarget = insertBefore ? target : target.nextElementSibling;\n            targetCategory = insertTarget.dataset.categoryid;\n            before = true; // We always insert before the selected target.\n\n            // Move the source category to its new position.\n            target.closest(SELECTORS.CATEGORY_LIST).insertBefore(source, insertTarget);\n        }\n\n        // Moved category.\n        const originCategory = source.dataset.categoryid;\n\n        // Insert the category after the target category\n        setCatOrder(originCategory, targetCategory, before, pagecontextid, pending);\n    };\n\n    /**\n     * Set draggble=true on draggable item when drag handle is clicked.\n     *\n     * @param {Event} e\n     */\n    const addDraggable = (e) => {\n        e.target.closest(SELECTORS.LIST_ITEM).setAttribute('draggable', true);\n    };\n\n    /**\n     * Set draggble=false on draggable item when drag handle is clicked.\n     * @param {Event} e\n     */\n    const removeDraggable = (e) => {\n        e.target.closest(SELECTORS.LIST_ITEM).setAttribute('draggable', false);\n    };\n\n    /**\n     * Allow drop\n     * This is required to allow drop event to be trigger on an element.\n     *\n     * @param {Object} e event\n     */\n    const allowDrop = (e) => {\n        e.preventDefault();\n    };\n\n    // Disable scrolling (for touch event) on the draggable item.\n    draggableitems.forEach(item => {\n            item.setAttribute(\"style\", \"touch-action: none;\");\n        }\n    );\n\n    // Events for droppable items.\n    droppableitems.forEach(item => {\n        item.addEventListener('dragenter', handleDrag);\n        item.addEventListener('dragover', allowDrop);\n        item.addEventListener('drop', handleDragEnd);\n    });\n\n    // Add event to draggable items.\n    draggableitems.forEach(item => {\n        // Touch events.\n        item.addEventListener('touchstart', handleDragStart, false);\n        item.addEventListener('touchmove', handleDrag, false);\n        item.addEventListener('touchend', handleDragEnd, false);\n\n        // Drag events.\n        item.addEventListener('dragstart', handleDragStart);\n    });\n\n    // Add event to drag handles.\n    dragHandles.forEach(item => {\n        item.addEventListener('mousedown', addDraggable);\n        item.addEventListener('mouseup', removeDraggable);\n    });\n};\n\n/**\n * Call categories fragment.\n *\n * @param {number} contextid String containing new ordered categories.\n * @returns {Promise}\n */\nconst getCategoriesFragment = (contextid) => {\n    let params = {\n        url: location.href,\n    };\n    return Fragment.loadFragment('qbank_managecategories', 'categories', contextid, params);\n};\n\n/**\n * Call external function update_category_order - inserts the updated column in the question_categories table.\n *\n * @param {number} originCategory Category which was dragged.\n * @param {number} targetCategory Context where category was dropped.\n * @param {boolean} isBeforeTarget True if the category was moved before the target category.\n * @param {number} pageContextId Context from which the category was dragged.\n * @param {Pending} pendingPromise Optional pending promise, will be resolved once the page fragment has been re-rendered.\n */\nconst setCatOrder = (originCategory, targetCategory, isBeforeTarget, pageContextId, pendingPromise = null) => {\n    const call = {\n        methodname: 'qbank_managecategories_update_category_order',\n        args: {\n            categoryid: originCategory,\n            targetcategoryid: targetCategory,\n            isbeforetarget: isBeforeTarget,\n        }\n    };\n    Ajax.call([call])[0]\n        .then(() => {\n            return getCategoriesFragment(pageContextId);\n        })\n        .catch(error => {\n            Notification.addNotification({\n                message: error.message,\n                type: 'error',\n            });\n            document.getElementsByClassName('alert-danger')[0]?.scrollIntoView();\n            return getCategoriesFragment(pageContextId);\n        })\n        .then((html, js) => {\n            Templates.replaceNode('#categoriesrendered', html, js);\n            if (pendingPromise) {\n                pendingPromise.resolve();\n            }\n            return;\n        })\n        .catch(error => {\n            if (pendingPromise) {\n                pendingPromise.reject(error);\n            }\n            Notification.exception(error);\n        });\n};\n\n\n/**\n * Method to add listener on category arrow - descendants.\n *\n * @param {number} pageContextId Context id for fragment.\n */\nconst categoryParentListener = (pageContextId) => {\n    document.querySelector(SELECTORS.CATEGORY_RENDERED).addEventListener('click', e => {\n        // Ignore if there is no categories containers.\n        if (!e.target.closest(SELECTORS.CATEGORY_RENDERED)) {\n            return;\n        }\n\n        // Ignore if there is no action icon.\n        const actionIcon = e.target.closest('.action-icon');\n        if (!actionIcon) {\n            return;\n        }\n\n        e.preventDefault();\n\n        // Retrieve data from action icon.\n        const data = actionIcon.dataset;\n\n        let call;\n        const targetParent = document.querySelector(`#category-${data.tocategory}`);\n        if (!targetParent) {\n            // Moving to the top level. Move after the current parent.\n            const currentParent = actionIcon.closest(SELECTORS.CATEGORY_LIST).closest(SELECTORS.LIST_ITEM);\n            call = {\n                methodname: 'qbank_managecategories_update_category_order',\n                args: {\n                    categoryid: data.tomove,\n                    targetcategoryid: currentParent.dataset.categoryid,\n                    isbeforetarget: false,\n                }\n            };\n        } else {\n            const childList = targetParent.querySelector(SELECTORS.CATEGORY_LIST);\n            if (childList) {\n                // The new parent already has children. Move the category to the end of its list.\n                call = {\n                    methodname: 'qbank_managecategories_update_category_order',\n                    args: {\n                        categoryid: data.tomove,\n                        targetcategoryid: childList.lastElementChild.dataset.categoryid,\n                        isbeforetarget: false,\n                    }\n                };\n            } else {\n                // Move the category to the new parent.\n                call = {\n                    methodname: 'qbank_managecategories_move_category_to_new_parent',\n                    args: {\n                        categoryid: data.tomove,\n                        newparentcategoryid: data.tocategory,\n                    }\n                };\n            }\n        }\n\n        Ajax.call([call])[0]\n            .then(() => getCategoriesFragment(pageContextId))\n            .then((html, js) => {\n                Templates.replaceNode(SELECTORS.CATEGORY_RENDERED, html, js);\n                return;\n            })\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Sets events listener for checkbox ticking change.\n */\nconst setupShowDescriptionCheckbox = () => {\n    document.addEventListener('click', e => {\n        const checkbox = e.target.closest(SELECTORS.SHOW_DESCRIPTION_CHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.form.submit();\n    });\n};\n\nconst createMoveCategoryList = (item, movingCategory) => {\n    const categories = [];\n    if (item.children) {\n        item.children.forEach(category => {\n            let child = {\n                categoryid: category.dataset.categoryid,\n                categoryname: category.dataset.categoryname,\n                categories: null,\n                firstchild: category === item.children[0],\n                current: category.dataset.categoryid === movingCategory,\n            };\n\n            const childList = category.querySelector(SELECTORS.CATEGORY_LIST);\n            if (childList) {\n                child.categories = createMoveCategoryList(childList, movingCategory);\n            }\n            categories.push(child);\n        });\n    }\n    return categories;\n};\n\n/**\n * Sets events listener for move category using dragdrop icon.\n * @param {number} pagecontextid Context id to get all relevant categories.\n */\nconst setUpMoveMenuItem = (pagecontextid) => {\n    document.querySelector(SELECTORS.CATEGORY_RENDERED).addEventListener('click', async(e) => {\n        // Return if it is not menu item.\n        const item = e.target.closest(SELECTORS.MOVE_CATEGORY_MENU_ITEM);\n        if (!item) {\n            return;\n        }\n        // Return if it is disabled.\n        if (item.getAttribute('aria-disabled')) {\n            return;\n        }\n\n        // Prevent addition click on the item.\n        item.setAttribute('aria-disabled', true);\n\n        let moveList = {contexts: []};\n        const contexts = document.querySelectorAll(SELECTORS.CONTEXT);\n        contexts.forEach(context => {\n            const moveContext = {\n                contextname: context.dataset.contextname,\n                categories: [],\n                hascategories: false,\n            };\n            moveContext.categories = createMoveCategoryList(context, item.dataset.categoryid);\n            moveContext.hascategories = moveContext.categories.length > 0;\n            moveList.contexts.push(moveContext);\n        });\n\n        const modal = await Modal.create({\n            title: getString('movecategory', 'qbank_managecategories', item.dataset.categoryname),\n            body: Templates.render('qbank_managecategories/move_context_list', moveList),\n            footer: '',\n            show: true,\n            large: true,\n        });\n        // Show modal and add click event for list item.\n        modal.getBody()[0].addEventListener('click', e => {\n            const target = e.target.closest(SELECTORS.MODAL_CATEGORY_ITEM);\n            if (!target) {\n                return;\n            }\n            const pending = new Pending('qbank_managecategories/modal');\n            setCatOrder(item.dataset.categoryid, target.dataset.categoryid, target.dataset.before, pagecontextid, pending);\n            modal.destroy();\n        });\n        item.setAttribute('aria-disabled', false);\n    });\n};\n\nexport const init = (pagecontextid) => {\n    categoryParentListener(pagecontextid);\n    setupSortableLists(pagecontextid);\n    setupShowDescriptionCheckbox();\n    setUpMoveMenuItem(pagecontextid);\n};\n"],"names":["SELECTORS","getCategoriesFragment","contextid","params","url","location","href","Fragment","loadFragment","setCatOrder","originCategory","targetCategory","isBeforeTarget","pageContextId","pendingPromise","call","methodname","args","categoryid","targetcategoryid","isbeforetarget","then","catch","error","addNotification","message","type","document","getElementsByClassName","scrollIntoView","html","js","replaceNode","resolve","reject","exception","createMoveCategoryList","item","movingCategory","categories","children","forEach","category","child","dataset","categoryname","firstchild","current","childList","querySelector","push","pagecontextid","addEventListener","e","target","closest","actionIcon","preventDefault","data","targetParent","tocategory","tomove","lastElementChild","newparentcategoryid","currentParent","Notification","draggableitems","querySelectorAll","droppableitems","dragHandles","getTouchTarget","elementFromPoint","changedTouches","pageX","pageY","getInsertBefore","clientY","dropTarget","getBoundingClientRect","top","clientHeight","clearTargetIndicators","classList","remove","dropTargetBefore","handleDragStart","window","console","info","_target$dataset","cancelable","handleDrag","insertBefore","parentElement","firstElementChild","add","insertTarget","nextElementSibling","previousElementSibling","handleDragEnd","pending","Pending","source","getElementById","before","appendChild","addDraggable","setAttribute","removeDraggable","allowDrop","setupSortableLists","checkbox","form","submit","async","getAttribute","moveList","contexts","context","moveContext","contextname","hascategories","length","modal","Modal","create","title","body","Templates","render","footer","show","large","getBody","destroy","setUpMoveMenuItem"],"mappings":"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"}