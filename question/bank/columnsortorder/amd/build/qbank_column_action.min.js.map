{"version":3,"file":"qbank_column_action.min.js","sources":["../src/qbank_column_action.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript for action on table columns.\n *\n * @module     qbank_columnsortorder/qbank_column_action\n * @copyright  2022 Catalyst IT Australia Pty Ltd\n * @author     Nathan Nguyen <nathannguyen@catalyst-ca.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport SortableList from 'core/sortable_list';\nimport jQuery from 'jquery';\n\n/** The table that we will add action */\nlet table;\n\n/** Data attribute used to identify each colum */\nlet dataIdAttribute;\n\n/** Data attribute used to display name of a column */\nlet dataNameAttribute;\n\n/** To track mouse event on a table header */\nlet currentHeader;\n\n/** To track current pinned header */\nlet currentPinnedHeader;\n\n/** Current mouse x postion, to track mouse event on a table header */\nlet currentX;\n\nconst SELECTORS = {\n    MOVE_HANDLE: '[data-action=\"move\"]',\n    RESIZE_HANDLE: '[data-action=\"resize\"]',\n    PIN_HANDLE: '[data-action=\"pin\"]',\n    PINNED_CLASS: 'pinned',\n    tableHeader: identifier => `th[data-${dataIdAttribute}=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\n    tableColumn: identifier => `td[data-${dataIdAttribute}=\"${identifier.replace(/[\"\\\\]/g, '\\\\$&')}\"]`,\n    tableHeaderSection: tableid => `#${tableid} thead tr`,\n};\n\n/**\n * Add handle\n * @param {Object} context data for each handle.\n * @param {Element} container container cthat will hold a action icon\n */\nconst addHandle = (context, container) => {\n    Templates.renderForPromise('qbank_columnsortorder/action_handle', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents(container, html, js);\n            return true;\n        })\n        .catch(ex => displayException(ex));\n};\n\n/**\n * Gets the newly reordered columns to display in the question bank view.\n * @returns {Array}\n */\nconst getColumnOrder = () => {\n    const tableHeaders = table.querySelectorAll(\"th\");\n    const columns = Array.from(tableHeaders).map(column => column.dataset[dataIdAttribute]);\n    return columns.filter((value, index) => columns.indexOf(value) === index);\n};\n\n/**\n * Set up move handle\n * @param {String} handleContainer container class that will hold the move icon.\n * @param {Function} callback function to run after a header has been moved.\n */\nexport const setUpMoveHandle = (handleContainer, callback) => {\n    // Add \"move icon\" for each header.\n    const tableHeaders = table.querySelectorAll(\"th\");\n    tableHeaders.forEach(header => {\n        const context = {\n            action: \"move\",\n            target: header.dataset[dataIdAttribute],\n            title: header.dataset[dataNameAttribute],\n            pixicon: \"i/dragdrop\",\n            pixcomponent: \"core\"\n        };\n        const container = header.querySelector(handleContainer);\n        addHandle(context, container);\n    });\n\n    // Implement drag and drop.\n    new SortableList(SELECTORS.tableHeaderSection(table.id), {\n        moveHandlerSelector: SELECTORS.MOVE_HANDLE,\n    });\n\n    jQuery(SELECTORS.tableHeaderSection(table.id)).on(SortableList.EVENTS.DRAGSTART, (event) => {\n        event.currentTarget.classList.add('active');\n    });\n\n    jQuery(SELECTORS.tableHeaderSection(table.id)).on(SortableList.EVENTS.DROP, (event) => {\n        // Current header.\n        const header = event.target;\n        // Find the previous sibling of the header, which will be used when moving columns.\n        const insertAfter = header.previousElementSibling;\n\n        // Move columns.\n        const columns = table.querySelectorAll(SELECTORS.tableColumn(header.dataset[dataIdAttribute]));\n        columns.forEach(column => {\n            const row = column.parentElement;\n            if (insertAfter) {\n                // Find the column to insert after.\n                const insertAfterColumn = row.querySelector(SELECTORS.tableColumn(insertAfter.dataset[dataIdAttribute]));\n                // Insert the column.\n                insertAfterColumn.after(column);\n            } else {\n                // Insert as the first child (first column in the table).\n                row.insertBefore(column, row.firstChild);\n            }\n        });\n        // Remove active class.\n        table.querySelectorAll('tr').forEach(item => item.classList.remove('active'));\n\n        // Persist column order.\n        const columnOrder = getColumnOrder();\n        callback(columnOrder);\n\n        // Update pinned headers.\n        if (currentPinnedHeader) {\n            const stopAtHeader = table.querySelector(SELECTORS.tableHeader(currentPinnedHeader));\n            processPinnedHeaders(true, stopAtHeader);\n        }\n    });\n\n};\n\n/**\n * Pin an element\n * @param {Element} element the node that will be pinned\n * @param {Number} width the width of pinned node.\n * @param {Number} zIndex so that the pinned node will be laid above other element.\n * @param {Number} left distance to the left border of the table.\n */\nconst pinElement = (element, width, zIndex, left) => {\n    element.style.position = \"sticky\";\n    element.style.width = width + \"px\";\n    element.style.zIndex = zIndex;\n    element.style.left = left + \"px\";\n    element.style.backgroundColor = \"wheat\";\n    element.classList.add('pinned');\n};\n\n/**\n * Unpin an element\n * @param {Element} element the node that will be unpinned\n */\nconst unpinElement = (element) => {\n    element.style.position = \"\";\n    element.style.zIndex = \"\";\n    element.style.backgroundColor = \"\";\n    element.classList.remove('pinned');\n};\n\n/**\n * Process pinned elements\n * @param {bool} toBePinned to be pinned or unpinned\n * @param {Element} stopAtHeader stop pinning after the header\n * @returns {Array} list of pinned headers\n */\nconst processPinnedHeaders = (toBePinned, stopAtHeader) => {\n    // Should be less than zIndex of dropdown - action men.\n    let zIndex = 999;\n    let left = 0;\n    let pinnedHeaders = [];\n    const tableHeaders = table.querySelectorAll(\"th\");\n\n    // Unpin all headers.\n    tableHeaders.forEach(header => {\n        // Unpin header.\n        unpinElement(header);\n        // Unpin columns.\n        const columns = table.querySelectorAll(SELECTORS.tableColumn(header.dataset[dataIdAttribute]));\n        columns.forEach(column => {\n            unpinElement(column);\n        });\n    });\n\n    // Pin headers.\n    if (toBePinned) {\n        const tableHeadersArr = Array.prototype.slice.call(tableHeaders);\n        tableHeadersArr.some(header => {\n            zIndex -= 1;\n            const width = header.offsetWidth;\n            // Pin header.\n            pinnedHeaders.push(header.dataset[dataIdAttribute]);\n            pinElement(header, width, zIndex, left);\n\n            // Pin columns.\n            const columns = table.querySelectorAll(SELECTORS.tableColumn(header.dataset[dataIdAttribute]));\n            columns.forEach(column => {\n                pinElement(column, width, zIndex, left);\n            });\n\n            // Increase margin.\n            left += width;\n\n            // End sticky headers.\n            return (header === stopAtHeader);\n        });\n\n    }\n    // Return pinned headers.\n    return pinnedHeaders;\n};\n/**\n * Set up pin handle\n * @param {String} handleContainer container class that will hold the pin icon.\n * @param {Function} callback function to run after a header has been pinned.\n */\nexport const setUpPinHandle = (handleContainer, callback) => {\n    // Add \"pin icon\" for each header.\n    const tableHeaders = table.querySelectorAll(\"th\");\n    tableHeaders.forEach(header => {\n        const context = {\n            action: \"pin\",\n            target: header.dataset[dataIdAttribute],\n            title: header.dataset[dataNameAttribute],\n            icon: '<i class=\"fa fa-thumb-tack mr-1\" aria-hidden=\"true\"></i>'\n        };\n        const container = header.querySelector(handleContainer);\n        addHandle(context, container);\n    });\n\n    // Mouse event on headers.\n    table.addEventListener('click', function(e) {\n        const pinHandle = e.target.closest(SELECTORS.PIN_HANDLE);\n        // Return if it is not ' pin' button.\n        if (!pinHandle) {\n            return;\n        }\n\n        // Pin all headers to the clicked header.\n        const target = pinHandle.dataset.target;\n        const stopAtHeader = table.querySelector(SELECTORS.tableHeader(target));\n        let toBePinned = true;\n        if (currentPinnedHeader === stopAtHeader.dataset[dataIdAttribute]) {\n            // Unpinned all headers.\n            toBePinned = false;\n            currentPinnedHeader = '';\n        } else {\n            // Track current pinned header.\n            currentPinnedHeader = stopAtHeader.dataset[dataIdAttribute];\n        }\n\n        const pinnedHeaders = processPinnedHeaders(toBePinned, stopAtHeader);\n\n        // Call back function to process pinned header.\n        callback(pinnedHeaders);\n    });\n};\n\n/**\n * Set up resize handle\n * @param {String} handleContainer container class that will hold the move icon.\n * @param {Function} callback function to run after a header has been resized.\n */\nexport const setUpResizeHandle = (handleContainer, callback) => {\n    // Add \"move icon\" for each header.\n    const tableHeaders = table.querySelectorAll(\"th\");\n    tableHeaders.forEach(header => {\n        const context = {\n            action: \"resize\",\n            target: header.dataset[dataIdAttribute],\n            title: header.dataset[dataNameAttribute],\n            icon: '<i class=\"icon fa fa-arrows-h fa-fw mr-n1\" aria-hidden=\"true\"></i>'\n        };\n        const container = header.querySelector(handleContainer);\n        addHandle(context, container);\n    });\n\n    // Start mouse event on headers.\n    table.addEventListener('mousedown', function(e) {\n        const resizeHandle = e.target.closest(SELECTORS.RESIZE_HANDLE);\n        // Return if it is not ' resize' button.\n        if (!resizeHandle) {\n            return;\n        }\n        // Save current position.\n        currentX = e.pageX;\n        // Find the header.\n        const target = resizeHandle.dataset.target;\n        currentHeader = table.querySelector(SELECTORS.tableHeader(target));\n    });\n\n    // Resize column as the mouse move.\n    table.addEventListener('mousemove', function(e) {\n        if (!currentHeader || currentX === 0) {\n            return;\n        }\n\n        // Offset.\n        const offset = e.pageX - currentX;\n        currentX = e.pageX;\n        const newWidth = currentHeader.offsetWidth + offset;\n        currentHeader.style.width = newWidth + 'px';\n    });\n\n    // Set new size when mouse is up.\n    table.addEventListener('mouseup', function() {\n        if (!currentHeader || currentX === 0) {\n            return;\n        }\n\n        let columnSizes = [];\n        const tableHeaders = table.querySelectorAll(\"th\");\n        tableHeaders.forEach(header => {\n            // Only get the width set via style attribute (set by pin or move action).\n            let size = {\n                column: header.dataset[dataIdAttribute],\n                width: header.style.width\n            };\n            columnSizes.push(size);\n        });\n        callback(JSON.stringify(columnSizes));\n        currentHeader = null;\n        currentX = 0;\n    });\n};\n\n/**\n * Set up hide/show dropdown\n * @param {String} dropdownContainer container class that will hold the hide/show dropdown.\n * @param {Function} callback function to run after a header has been hidden/shown.\n */\nexport const setUpHideShowDropdown = (dropdownContainer, callback) => {\n    const container = document.querySelector(dropdownContainer);\n    let currentHiddenColumns = table.dataset.hiddencolumns;\n    if (currentHiddenColumns) {\n        currentHiddenColumns = JSON.parse(currentHiddenColumns);\n    }\n    let context = {\n        columns: [],\n        title: \"Drop down menu\",\n        text: \"Show/Hide Column\",\n        id: \"showhidecolumn\"\n    };\n    const tableHeaders = table.querySelectorAll(\"th\");\n    tableHeaders.forEach(header => {\n        let visible = true;\n        // Hide column if it is one of current hidden columns.\n        if (currentHiddenColumns && currentHiddenColumns.includes(header.dataset[dataIdAttribute])) {\n            visible = false;\n            // Hide header.\n            header.style.display = \"none\";\n            // Hide column.\n            const columns = table.querySelectorAll(SELECTORS.tableColumn(header.dataset[dataIdAttribute]));\n            columns.forEach(column => {\n                column.style.display = \"none\";\n            });\n        }\n        // Data for checkbox.\n        const column = {\n            id: header.dataset[dataIdAttribute],\n            name: header.dataset[dataNameAttribute],\n            checked: visible\n        };\n        context.columns.push(column);\n\n    });\n\n    Templates.renderForPromise('qbank_columnsortorder/checkbox_dropdown', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents(container, html, js);\n            return true;\n        })\n        .then(()=> {\n            addDropdownEventListener(container, callback);\n            return true;\n        })\n        .catch(ex => displayException(ex));\n};\n\n/**\n * Add event listener for drop down item\n * @param {Element} container dropdown container.\n * @param {Function} callback function to run after a header has been hidden/shown.\n */\nconst addDropdownEventListener = (container, callback) => {\n    // Click event when click on an item.\n    const dropdownItems = container.querySelectorAll(\".dropdown-item\");\n    dropdownItems.forEach(item => {\n        item.addEventListener('click', function(e) {\n            if (e.target.type !== 'checkbox') {\n                const checkbox = item.querySelector(\"input[type=checkbox]\");\n                checkbox.click();\n            }\n        });\n    });\n\n    // Click event when clicking on a checkbox.\n    const checkboxes = container.querySelectorAll(\"input[type=checkbox]\");\n    checkboxes.forEach(checkbox => {\n        checkbox.addEventListener('click', function(e) {\n            const element = e.target;\n            const target = element.value;\n            const header = table.querySelector(SELECTORS.tableHeader(target));\n            if (element.checked === true) {\n                // Show header.\n                header.style.display = \"\";\n                // Show column.\n                const columns = table.querySelectorAll(SELECTORS.tableColumn(target));\n                columns.forEach(column => {\n                    column.style.display = \"\";\n                });\n            } else {\n                // Hide header.\n                header.style.display = \"none\";\n                // Hide column.\n                const columns = table.querySelectorAll(SELECTORS.tableColumn(target));\n                columns.forEach(column => {\n                    column.style.display = \"none\";\n                });\n            }\n\n            let hiddenColumns = [];\n            checkboxes.forEach(checkbox => {\n                if (checkbox.checked === false) {\n                    hiddenColumns.push(checkbox.value);\n                }\n            });\n            callback(hiddenColumns);\n\n        });\n    });\n};\n\n/**\n * Current pinned columns\n */\nexport const setUpCurrentPinnedColumns = () => {\n    const currentPinnedColumns = table.dataset.pinnedcolumns;\n    if (!currentPinnedColumns) {\n        return;\n    }\n    // Existing pinned headers.\n    const decodedPinnedColumns = JSON.parse(currentPinnedColumns);\n    if (decodedPinnedColumns.length > 0) {\n        // Save pinned header.\n        currentPinnedHeader = decodedPinnedColumns[decodedPinnedColumns.length - 1];\n        if (currentPinnedHeader !== '') {\n            const stopAtHeader = table.querySelector(SELECTORS.tableHeader(currentPinnedHeader));\n            processPinnedHeaders(true, stopAtHeader);\n        }\n    }\n};\n\n/**\n * Current columns sizes\n */\nexport const setUpCurrentColumnSizes = () => {\n    const currentColumnSizes = table.dataset.colsize;\n    // Set sizes for each header.\n    if (currentColumnSizes) {\n        const decodedSizes = JSON.parse(currentColumnSizes);\n        if (Array.isArray(decodedSizes)) {\n            decodedSizes.forEach(colSize => {\n                if (colSize.width !== '') {\n                    const header = table.querySelector(SELECTORS.tableHeader(colSize.column));\n                    if (header) {\n                        header.style.width = colSize.width;\n                    }\n                }\n            });\n        }\n    }\n};\n\n/**\n * Initialize module\n * @param {String} id unique id for columns.\n * @param {String} dataIdAttr data attribute to identify column.\n * @param {String} dataNameAttr data attribute that container column name.\n */\nexport const setUpTable = (id, dataIdAttr, dataNameAttr) => {\n    table = document.querySelector(`#${id}`);\n\n    // Check if the table is already setup.\n    if (table.dataset.setup == 'true') {\n        return false;\n    }\n\n    dataIdAttribute = dataIdAttr;\n    dataNameAttribute = dataNameAttr;\n\n    // Add class to each column as to identify them later.\n    const tableHeaders = table.querySelectorAll(\"th\");\n    const rows = table.querySelectorAll(\"tr\");\n    rows.forEach(row => {\n        const columns = row.querySelectorAll(\"td\");\n        for (let i = 0; i < columns.length; i++) {\n            columns[i].dataset[dataIdAttribute] = tableHeaders[i].dataset[dataIdAttribute];\n        }\n    });\n\n    // Prevent from setting up the table again.\n    table.dataset.setup = 'true';\n    return true;\n};\n"],"names":["table","dataIdAttribute","dataNameAttribute","currentHeader","currentPinnedHeader","currentX","SELECTORS","identifier","replace","tableid","addHandle","context","container","renderForPromise","then","_ref","html","js","appendNodeContents","catch","ex","handleContainer","callback","querySelectorAll","forEach","header","action","target","dataset","title","pixicon","pixcomponent","querySelector","SortableList","id","moveHandlerSelector","on","EVENTS","DRAGSTART","event","currentTarget","classList","add","DROP","insertAfter","previousElementSibling","column","row","parentElement","after","insertBefore","firstChild","item","remove","columnOrder","tableHeaders","columns","Array","from","map","filter","value","index","indexOf","getColumnOrder","stopAtHeader","processPinnedHeaders","pinElement","element","width","zIndex","left","style","position","backgroundColor","unpinElement","toBePinned","pinnedHeaders","prototype","slice","call","some","offsetWidth","push","icon","addEventListener","e","pinHandle","closest","resizeHandle","pageX","offset","newWidth","columnSizes","size","JSON","stringify","dropdownContainer","document","currentHiddenColumns","hiddencolumns","parse","text","visible","includes","display","name","checked","_ref2","addDropdownEventListener","type","click","checkboxes","checkbox","hiddenColumns","currentPinnedColumns","pinnedcolumns","decodedPinnedColumns","length","currentColumnSizes","colsize","decodedSizes","isArray","colSize","dataIdAttr","dataNameAttr","setup","i"],"mappings":"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"}